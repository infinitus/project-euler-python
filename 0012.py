#The sequence of triangle numbers is generated by adding the natural numbers.
#So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
#ten terms would be:

#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

#Let us list the factors of the first seven triangle numbers:

#1: 1
#3: 1,3
#6: 1,2,3,6
#10: 1,2,5,10
#15: 1,3,5,15
#21: 1,3,7,21
#28: 1,2,4,7,14,28
#
#We can see that 28 is the first triangle number to have over five divisors.
#What is the value of the first triangle number to have over 500 divisors?

import time
import operator

start = time.time()


def tri_num_generator():
    nat_num = 1 
    i = 1
    while True:
        i += 1
        nat_num += i  
        yield nat_num


def e_sieve(n):
    candidates = list(range(n+1))
    fin = int(n**0.5)
    for i in xrange(2, fin+1):
        if candidates[i]:
            candidates[2*i::i] = [None] * (n//i - 1)
    return [i for i in candidates[2:] if i]


def GetPrimeDecomp(n):
    d = {}
    primes = e_sieve(n)
    for p in primes:
        while n % p == 0:
            n /= p
            d[p] = d.setdefault(p, 0) + 1
        if n == 1:
            return d

def factors(n):
    for x in xrange(2,n):
        if n%x == 0:
            return (x,) + factors(n/x)
    return (n,1)

def NumberOfDivisors(n):
    d = GetPrimeDecomp(n)
    powers_plus = map(lambda x: x+1, d.values())
    return reduce(operator.mul, powers_plus, 1)


def main():
    triangle_numbers = tri_num_generator()
    for number in triangle_numbers:
        if NumberOfDivisors(number) >= 500:
            print NumberOfDivisors(number)
            print number
            break
    print time.time() - start


main()
